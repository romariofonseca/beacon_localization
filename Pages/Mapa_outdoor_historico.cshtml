@page "/Mapa-outdoor-historico"
@model VirtualBorder.Pages.MapaOutdoorHistoricoModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Mapa-outdoor Histórico";
}

<div style="display: flex;">
    <!-- Lista de seleção lateral -->
    <div style="width: 250px; padding: 10px; background-color: #f8f9fa; border-right: 1px solid #dee2e6;">
        <h4>Dispositivos</h4>
        <input type="text" id="filterInput" placeholder="Filtrar dispositivos..." oninput="filterDevices()">
        <div id="deviceList"></div>
        <div>
            <label for="startDate">Data Início:</label>
            <input type="datetime-local" id="startDate">
        </div>
        <div>
            <label for="endDate">Data Fim:</label>
            <input type="datetime-local" id="endDate">
        </div>
        <button type="button" onclick="updateMap()">Atualizar Mapa</button>
        <button type="button" onclick="exportToExcel()">Exportar para Excel</button>
    </div>

    <!-- Mapa OpenStreetMap com Leaflet.js -->
    <div id="map" style="height: 800px; width: 100%;"></div>
</div>

<!-- Estilo para os dispositivos -->
<style>
    .device-item {
        margin-bottom: 10px;
    }

    /* Efeito de piscar */
    .blink {
        animation: blink-animation 1s steps(2, start) infinite;
    }

    @@keyframes blink-animation {
        to {
            visibility: hidden;
        }
    }

    /* Estilo para os números de sequência com marcador de atenção */
    .sequence-number div {
        font-size: 16px;
        color: red;
        font-weight: bold;
        display: flex;
        align-items: center;
    }

    .sequence-number svg {
        margin-right: 5px;
        width: 20px;
        height: 20px;
    }
</style>

<!-- Inclua o CSS do Leaflet -->
<link rel="stylesheet" href="~/css/leaflet.css" />
<!-- Inclua o JS do Leaflet -->
<script src="~/js/leaflet.js"></script>
<script src="~/js/xlsx.full.min.js"></script>

<script>
    var map;
    var markers = [];
    var devices = [];
    var exportedData = [];
    var deviceListData = []; // Armazena a lista de dispositivos para seleção

    // Inicializa o mapa OpenStreetMap com Leaflet.js
    function initMap(center = [-23.5505, -46.6333], zoomLevel = 12) {
        map = L.map('map').setView(center, zoomLevel); // Inicializa o mapa com o centro e zoom fornecidos

        // Adiciona uma camada de mapas do OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);
    }

    // Função para buscar a lista de dispositivos das APIs
    function fetchDeviceList() {
        Promise.all([
            fetch("http://10.241.210.95:5043/api/gps/get_all").then(response => response.json()),
            fetch("http://10.241.210.95:5043/api/devices").then(response => response.json())
        ])
        .then(([gpsData, devicesData]) => {
            const validDevices = getValidDevices(gpsData, devicesData);
            deviceListData = validDevices;
            populateDeviceList(deviceListData);
        })
        .catch(error => console.error('Erro ao buscar a lista de dispositivos:', error));
    }

    // Função para obter dispositivos válidos presentes em ambas as APIs
    function getValidDevices(gpsData, devicesData) {
        const devicesMap = new Map(devicesData.map(device => [device.mac, device.nome]));
        return gpsData.filter(device => devicesMap.has(device.mac))
                      .map(device => ({ ...device, nome: devicesMap.get(device.mac) }));
    }

    // Preenche a lista de dispositivos na barra lateral
    function populateDeviceList(data) {
        const deviceList = document.getElementById('deviceList');
        deviceList.innerHTML = ''; // Limpar a lista existente

        const uniqueDevices = Array.from(new Set(data.map(device => device.mac))); // Obter MACs únicos

        uniqueDevices.forEach(function (mac, index) {
            const device = data.find(d => d.mac === mac);
            const deviceItem = `
                <div class="device-item">
                    <input type="checkbox" id="device-${index}" value="${mac}">
                    <label for="device-${index}">Nome: ${device.nome}</label>
                </div>
            `;
            deviceList.innerHTML += deviceItem;
        });
    }

    // Função para buscar os dados dos dispositivos com base nas datas selecionadas
    function fetchDevices(startDate, endDate, selectedDevices) {
        const macAddresses = selectedDevices.join(',');
        const url = `http://10.241.210.95:5043/api/gps/get_by_date_range?start=${encodeURIComponent(startDate)}&end=${encodeURIComponent(endDate)}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                devices = data;

                if (devices.length === 0) {
                    alert('Nenhum dado encontrado para os dispositivos selecionados no intervalo de datas.');
                    return;
                }

                // Encontra a última leitura
                const lastDevice = devices[devices.length - 1];

                // Atualiza o mapa com o ponto da última leitura
                map.setView([lastDevice.latitude, lastDevice.longitude], 18);

                updateMarkers();
            })
            .catch(error => console.error('Erro ao buscar os dispositivos:', error));
    }

    // Função para definir o ícone de empilhadeira customizado com base no tempo de leitura
    function getForkliftIcon(color) {
        return L.icon({
            iconUrl: `/icons/forklift-${color}.png`, // Caminho do ícone de empilhadeira colorido
            iconSize: [90, 90],  // Tamanho do ícone
            iconAnchor: [15, 30],  // Ponto do ícone que será centralizado no mapa
            popupAnchor: [0, -30]  // Onde a pop-up será exibida em relação ao ícone
        });
    }

    // Função para definir a cor do ícone com base na diferença de tempo
    function getMarkerColor(device) {
        const deviceDate = new Date(device.dataHora);
        const now = new Date();
        const timeDiff = (now - deviceDate) / (1000 * 60); // Diferença em minutos

        if (timeDiff < 5) {
            return 'green'; // Menos de 5 minutos, verde
        } else if (timeDiff >= 5 && timeDiff <= 10) {
            return 'orange'; // Entre 5 e 10 minutos, laranja
        } else {
            return 'red'; // Mais de 10 minutos, vermelho
        }
    }

    // Função para calcular a distância entre dois pontos usando a fórmula de Haversine
    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371e3; // Raio da Terra em metros
        const φ1 = lat1 * Math.PI / 180;
        const φ2 = lat2 * Math.PI / 180;
        const Δφ = (lat2 - lat1) * Math.PI / 180;
        const Δλ = (lon2 - lon1) * Math.PI / 180;

        const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
            Math.cos(φ1) * Math.cos(φ2) *
            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        const distance = R * c; // Distância em metros
        return distance;
    }

    // Desenha linhas com base na lógica especificada
    function drawMovementLine(deviceHistory) {
        const latLngs = deviceHistory.map(device => [device.latitude, device.longitude]);

        const timeDeltas = [];
        let totalTime = 0;
        exportedData = [];

        let currentIndex = 0;
        let sequenceNumber = 1;

        while (currentIndex < latLngs.length - 1) {
            let found = false;
            for (let nextIndex = currentIndex + 1; nextIndex < latLngs.length; nextIndex++) {
                const distance = calculateDistance(
                    latLngs[currentIndex][0], latLngs[currentIndex][1],
                    latLngs[nextIndex][0], latLngs[nextIndex][1]
                );
                if (distance>50)  {
                    // Desenha a linha entre currentIndex e nextIndex
                    const segment = [latLngs[currentIndex], latLngs[nextIndex]];
                    var polyline = L.polyline(segment, {
                        color: 'blue',
                        dashArray: '10, 10'  // Define o estilo tracejado
                    }).addTo(map);
                    markers.push(polyline);

                    // Calcula o delta de tempo
                    const prevTime = new Date(deviceHistory[currentIndex].dataHora);
                    const currTime = new Date(deviceHistory[nextIndex].dataHora);
                    const deltaSeconds = (currTime - prevTime) / 1000;

                    totalTime += deltaSeconds;

                    const hours = Math.floor(deltaSeconds / 3600);
                    const minutes = Math.floor((deltaSeconds % 3600) / 60);
                    const seconds = Math.floor(deltaSeconds % 60);

                    timeDeltas.push({
                        description: `${sequenceNumber} - ${sequenceNumber + 1}`,
                        hours,
                        minutes,
                        seconds
                    });

                    // Adiciona o marcador de sequência
                    addSequenceNumber(latLngs[nextIndex], sequenceNumber, timeDeltas, formatTotalTime(totalTime));

                    // Atualiza currentIndex e sequenceNumber
                    currentIndex = nextIndex;
                    sequenceNumber += 1;

                    found = true;
                    break; // Sai do loop interno para reiniciar a partir do novo currentIndex
                }
            }
            if (!found) {
                // Não foram encontrados pontos a mais de 100 metros; encerra o loop
                //break;
                currentIndex+=1;
                //nextIndex++;
                //sequenceNumber += 1;
            }
        }

        // Armazena os dados para exportação
        exportedData = timeDeltas.slice();
        exportedData.push(`Total: ${formatTotalTime(totalTime)}`);

        // Adicionar marcador para o ponto de início com hora de saída
        var startPoint = latLngs[0];
        var startMarker = L.circleMarker(startPoint, { radius: 8, color: 'green', fillColor: 'green', fillOpacity: 1 })
            .bindPopup(`Início: ${deviceHistory[0].dataHora}`)
            .addTo(map);
        markers.push(startMarker);

        // Adicionar marcador para o ponto de chegada com hora de chegada
        var lastPoint = latLngs[latLngs.length - 1];
        var endMarker = L.circleMarker(lastPoint, { radius: 8, color: 'red', fillColor: 'red', fillOpacity: 1 })
            .bindPopup(`Chegada: ${deviceHistory[deviceHistory.length - 1].dataHora}`)
            .addTo(map);
        markers.push(endMarker);
    }

    // Função auxiliar para formatar o tempo total
    function formatTotalTime(totalSeconds) {
        const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
        const minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
        const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, '0');
        return `${hours}:${minutes}:${seconds}`;
    }

    // Função para adicionar números de sequência nos pontos específicos com ícone de atenção e delta de horas
    function addSequenceNumber(position, number, timeDeltas, totalTime) {
        const sequenceIcon = L.divIcon({
            className: 'sequence-number',
            html: `
                <div>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="orange" width="20px" height="20px">
                        <path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"/>
                    </svg>
                    ${number}
                </div>`,
            iconSize: [30, 30],
            iconAnchor: [15, 15]
        });

        const marker = L.marker(position, { icon: sequenceIcon }).addTo(map);
        markers.push(marker);

        // Vincula a pop-up com os deltas de tempo e o total ao clicar no marcador
        const popupContent = timeDeltas.map(delta => {
            return `${delta.description}: ${String(delta.hours).padStart(2, '0')}:${String(delta.minutes).padStart(2, '0')}:${String(delta.seconds).padStart(2, '0')}`;
        }).join('<br>') + `<br><strong>Total: ${totalTime}</strong>`;
        marker.bindPopup(popupContent);
    }

    // Função para exportar os dados para um arquivo Excel
    function exportToExcel() {
        // Verifica se há dados para exportação
        if (!exportedData || exportedData.length === 0) {
            alert('Não há dados para exportar.');
            return;
        }

        // Formata os dados para exportação
        const worksheetData = exportedData.map((delta, index) => {
            if (typeof delta === 'object') {
                return {
                    Ponto: index + 1,
                    Descrição: delta.description,
                    Horas: String(delta.hours).padStart(2, '0'),
                    Minutos: String(delta.minutes).padStart(2, '0'),
                    Segundos: String(delta.seconds).padStart(2, '0')
                };
            }
        }).filter(item => item !== undefined);

        // Calcula o total do percurso
        let totalSeconds = exportedData.reduce((acc, delta) => {
            if (typeof delta === 'object') {
                return acc + (delta.hours * 3600) + (delta.minutes * 60) + delta.seconds;
            }
            return acc;
        }, 0);

        const totalHoras = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
        const totalMinutos = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
        const totalSegundos = String(totalSeconds % 60).padStart(2, '0');

        worksheetData.push({
            Ponto: "Total",
            Descrição: "Total do Percurso",
            Horas: totalHoras,
            Minutos: totalMinutos,
            Segundos: totalSegundos
        });

        // Cria a planilha Excel e adiciona os dados
        const worksheet = XLSX.utils.json_to_sheet(worksheetData);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, "Deltas de Tempo");
        XLSX.writeFile(workbook, "Deltas_Tempo_Percurso.xlsx");
    }

    // Atualiza os marcadores no mapa com base nos dispositivos selecionados
    function updateMarkers() {
        clearMarkers();

        const selectedDevices = Array.from(document.querySelectorAll('#deviceList input[type="checkbox"]:checked'))
            .map(checkbox => checkbox.value);

        if (selectedDevices.length === 0) {
            alert('Por favor, selecione pelo menos um dispositivo.');
            return;
        }

        const filteredDevices = selectedDevices.map(mac => devices.filter(device => device.mac === mac));

        filteredDevices.forEach(function (deviceHistory) {
            if (deviceHistory.length > 0) {
                drawMovementLine(deviceHistory);

                // Última posição para o marcador final
                const lastDevice = deviceHistory[deviceHistory.length - 1];
                const markerColor = getMarkerColor(lastDevice);
                const forkliftIcon = getForkliftIcon(markerColor);
                var marker = L.marker([lastDevice.latitude, lastDevice.longitude], { icon: forkliftIcon }).addTo(map);
                marker.bindPopup(`<strong>MAC:</strong> ${lastDevice.mac}<br><strong>Nome:</strong> ${lastDevice.nome}<br><strong>Data:</strong> ${lastDevice.dataHora}<br><strong>Altitude:</strong> ${lastDevice.altitude}m`);
                markers.push(marker);
            }
        });
    }

    // Função para limpar todos os marcadores do mapa
    function clearMarkers() {
        markers.forEach(marker => map.removeLayer(marker));
        markers = [];
    }

    // Função para filtrar dispositivos na lista
    function filterDevices() {
        const filterValue = document.getElementById('filterInput').value.toLowerCase();
        const deviceItems = document.querySelectorAll('.device-item');

        deviceItems.forEach(item => {
            const deviceName = item.querySelector('label').textContent.toLowerCase();
            if (deviceName.includes(filterValue)) {
                item.style.display = 'block';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Função para atualizar o mapa
    function updateMap() {
        const startDateInput = document.getElementById('startDate').value;
        const endDateInput = document.getElementById('endDate').value;

        if (!startDateInput || !endDateInput) {
            alert('Por favor, selecione as datas de início e fim.');
            return;
        }

        const selectedDevices = Array.from(document.querySelectorAll('#deviceList input[type="checkbox"]:checked'))
            .map(checkbox => checkbox.value);

        if (selectedDevices.length === 0) {
            alert('Por favor, selecione pelo menos um dispositivo.');
            return;
        }

        fetchDevices(startDateInput, endDateInput, selectedDevices);
    }

    
    // Inicializa o mapa ao carregar a página
    document.addEventListener('DOMContentLoaded', function () {
        initMap(); // Inicializa o mapa com um centro padrão
        fetchDeviceList(); // Carrega a lista de dispositivos para seleção
    });
</script>